name: CI/CD Pipeline for Diagram Microservice v2

on:
  push:
    branches: [main, develop]
    paths:
      - 'src/agents/diagram_microservice_v2/**'
      - '.github/workflows/ci_cd_pipeline.yml'
  pull_request:
    branches: [main]
    paths:
      - 'src/agents/diagram_microservice_v2/**'
  workflow_dispatch:
    inputs:
      deploy_to_railway:
        description: 'Deploy to Railway after tests'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      environment:
        description: 'Deployment environment'
        required: false
        default: 'staging'
        type: choice
        options:
          - 'staging'
          - 'production'

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  DOCKER_BUILDKIT: 1
  SERVICE_PATH: src/agents/diagram_microservice_v2

jobs:
  # Job 1: Linting and Code Quality
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install linting tools
        run: |
          cd ${{ env.SERVICE_PATH }}
          pip install black flake8 mypy pylint
          
      - name: Run Black formatter check
        run: |
          cd ${{ env.SERVICE_PATH }}
          black --check . || echo "::warning::Code formatting issues found"
          
      - name: Run Flake8 linter
        run: |
          cd ${{ env.SERVICE_PATH }}
          flake8 . --config=.flake8 || echo "::warning::Linting issues found"
          
      - name: Run MyPy type checker
        run: |
          cd ${{ env.SERVICE_PATH }}
          mypy . --ignore-missing-imports || echo "::warning::Type checking issues found"

  # Job 2: Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
          
      - name: Install dependencies
        run: |
          cd ${{ env.SERVICE_PATH }}
          pip install -r requirements.txt
          pip install -r requirements-test.txt
          
      - name: Run unit tests
        run: |
          cd ${{ env.SERVICE_PATH }}
          pytest tests/unit -v --cov=. --cov-report=xml --cov-report=html --junit-xml=test-results/unit-results.xml
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: unit-test-results-${{ matrix.python-version }}
          path: |
            ${{ env.SERVICE_PATH }}/test-results/
            ${{ env.SERVICE_PATH }}/htmlcov/
            
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ${{ env.SERVICE_PATH }}/coverage.xml
          flags: unittests
          name: codecov-${{ matrix.python-version }}

  # Job 3: Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          cd ${{ env.SERVICE_PATH }}
          pip install -r requirements.txt
          pip install -r requirements-test.txt
          
      - name: Set up test environment
        run: |
          cd ${{ env.SERVICE_PATH }}
          cp .env.test .env
          echo "REDIS_URL=redis://localhost:6379" >> .env
          echo "SUPABASE_URL=http://localhost:5432" >> .env
          echo "SUPABASE_ANON_KEY=test_key" >> .env
          
      - name: Run database migrations
        run: |
          cd ${{ env.SERVICE_PATH }}
          PGPASSWORD=testpassword psql -h localhost -U postgres -d test_db < storage/migrations/001_create_diagram_tables.sql
          
      - name: Run integration tests
        run: |
          cd ${{ env.SERVICE_PATH }}
          pytest tests/integration -v --junit-xml=test-results/integration-results.xml
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-results
          path: ${{ env.SERVICE_PATH }}/test-results/

  # Job 4: Docker Build and Test
  docker-build:
    name: Docker Build and Test
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build Docker image
        run: |
          cd ${{ env.SERVICE_PATH }}
          docker build -t diagram-microservice-v2:test .
          
      - name: Run Docker container tests
        run: |
          cd ${{ env.SERVICE_PATH }}
          docker run -d --name test-container \
            -p 8001:8001 \
            -e LOG_LEVEL=DEBUG \
            -e CACHE_TYPE=memory \
            diagram-microservice-v2:test
          
          # Wait for container to be ready
          sleep 10
          
          # Test health endpoint
          curl -f http://localhost:8001/health || exit 1
          
          # Stop container
          docker stop test-container
          
      - name: Run Docker Compose tests
        run: |
          cd ${{ env.SERVICE_PATH }}
          docker-compose -f docker-compose.test.yml up -d
          
          # Wait for services
          sleep 20
          
          # Run tests
          docker-compose -f docker-compose.test.yml exec -T test-runner pytest tests/ -v
          
          # Clean up
          docker-compose -f docker-compose.test.yml down
          
      - name: Push to Docker Registry (if main branch)
        if: github.ref == 'refs/heads/main'
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          
          docker tag diagram-microservice-v2:test ${{ secrets.DOCKER_USERNAME }}/diagram-microservice-v2:latest
          docker tag diagram-microservice-v2:test ${{ secrets.DOCKER_USERNAME }}/diagram-microservice-v2:${{ github.sha }}
          
          docker push ${{ secrets.DOCKER_USERNAME }}/diagram-microservice-v2:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/diagram-microservice-v2:${{ github.sha }}

  # Job 5: Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [integration-tests, docker-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          cd ${{ env.SERVICE_PATH }}
          pip install -r requirements.txt
          pip install locust
          
      - name: Start test environment
        run: |
          cd ${{ env.SERVICE_PATH }}
          docker-compose up -d
          sleep 20
          
      - name: Run Locust performance tests
        run: |
          cd ${{ env.SERVICE_PATH }}
          locust -f tests/performance/locustfile.py \
            --headless \
            --users 50 \
            --spawn-rate 5 \
            --run-time 60s \
            --host http://localhost:8001 \
            --html performance-report.html
            
      - name: Upload performance report
        uses: actions/upload-artifact@v3
        with:
          name: performance-report
          path: ${{ env.SERVICE_PATH }}/performance-report.html
          
      - name: Clean up
        run: |
          cd ${{ env.SERVICE_PATH }}
          docker-compose down

  # Job 6: Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '${{ env.SERVICE_PATH }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Run Snyk security scan
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=${{ env.SERVICE_PATH }}/requirements.txt

  # Job 7: Deploy to Railway
  deploy-railway:
    name: Deploy to Railway
    runs-on: ubuntu-latest
    needs: [integration-tests, docker-build, security-scan]
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_to_railway == 'true')
    environment:
      name: ${{ github.event.inputs.environment || 'staging' }}
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install Railway CLI
        run: |
          curl -fsSL https://railway.app/install.sh | sh
          
      - name: Deploy to Railway
        id: deploy
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          cd ${{ env.SERVICE_PATH }}
          
          # Select environment
          if [ "${{ github.event.inputs.environment }}" == "production" ]; then
            railway environment production
          else
            railway environment staging
          fi
          
          # Deploy
          railway up --detach
          
          # Get deployment URL
          DEPLOY_URL=$(railway status --json | jq -r '.url')
          echo "url=$DEPLOY_URL" >> $GITHUB_OUTPUT
          
      - name: Verify deployment
        run: |
          sleep 30
          curl -f ${{ steps.deploy.outputs.url }}/health || exit 1
          
      - name: Run smoke tests
        run: |
          cd ${{ env.SERVICE_PATH }}
          pytest tests/smoke -v --base-url=${{ steps.deploy.outputs.url }}
          
      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Deployment to Railway ${{ github.event.inputs.environment || 'staging' }} completed!
            URL: ${{ steps.deploy.outputs.url }}
            Commit: ${{ github.sha }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

  # Job 8: System Tests (on deployed environment)
  system-tests:
    name: System Tests
    runs-on: ubuntu-latest
    needs: deploy-railway
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          cd ${{ env.SERVICE_PATH }}
          pip install -r requirements-test.txt
          
      - name: Run system tests
        run: |
          cd ${{ env.SERVICE_PATH }}
          pytest tests/system -v \
            --base-url=${{ needs.deploy-railway.outputs.url }} \
            --junit-xml=test-results/system-results.xml
            
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: system-test-results
          path: ${{ env.SERVICE_PATH }}/test-results/

  # Job 9: Rollback on Failure
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    needs: [deploy-railway, system-tests]
    if: failure() && needs.deploy-railway.result == 'success'
    steps:
      - name: Install Railway CLI
        run: |
          curl -fsSL https://railway.app/install.sh | sh
          
      - name: Rollback deployment
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          railway rollback
          
      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            ⚠️ Deployment rolled back due to test failures!
            Environment: ${{ github.event.inputs.environment || 'staging' }}
            Commit: ${{ github.sha }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}